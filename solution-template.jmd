---
title: "BEE 4750/5750 Homework 3"
author: "Julia Gonzales (jeg334)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1

## Problem 1.1

The decision variables are the installed capacity of each generator type $g$ in MW, $x_g$,
the energy production of each generator type $g$ at every period $t$, $y_{g,t}$,
and the amount of not-served energy at any given time $nse_t$. 


## Problem 1.2

The objective is to minimize cost over the year, so we seek to minimize the sum of the investment and operating costs. 
If $Z$ is the total cost, $I$ is the investment cost, $O$ is the operating cost, and $NSE$ is the not-served energy cost,
```math
min_{x_g,y_{g,t}}Z = I + O + NSE
```
In this case, $I$ is the sum of the investment costs for all types of plants
```math
I = 457000*x_{geothermal} + 268000*x_{coal} + 85000*x_{CCGT}
+ 62580*x_{CT} + 92000*x_{wind} + 92000*x_{solar}
```
Similarly, $O$ is the sum of the investment costs for all generation types.
```math
O = 365*\sum_t 22*y_{coal,t} + 35*y_{CCGT,t} + 45*y_{CT,t}
```
where $365$ is the number of days in a year, and t is the time of day between the first and twenty-fourth hour. 

$NSE$ is the sum over the year of the product of the not-served energy cost and the amount of energy not served at any given time.
```math
NSE = 365*\sum_{t} $1000*nse_t
```

## Problem 1.3

One set of constraints relates to the total generation from each type of generator. 
Each generator's maximum generation at any given time is the product of their installed capacity and capacity factor.
```math
y_{g,t} <= CF_g*x_g
```
Another constraint is that the generation from every source plus the not-served energy must equal the total demand. 

If $D$ is the demand at any given hour,
```math
y_{g,t} + nse_t = D
```
One other constraint is that each generator's installed capacity and generation cannot be negative. 
The not-served energy also cannot be negative.
```math
x_g >= 0 
y_{g,t} >= 0 
nse_t >= 0
```

## Problem 1.4

```julia

using JuMP
using HiGHS

#create  model and list of generators
genmincost = Model(HiGHS.Optimizer)
generators = ["geothermal","coal","CCGT","CT","Wind","Solar"]
G = 1:length(generators)

#create variables with nonnegativity constraint
@variable(genmincost,x[G]>=0)
@variable(genmincost,y[G,hours]>=0)
@variable(genmincost,nse[hours]>=0)

#create objective function 
@objective(genmincost,Min,((sum(investment_cost.*x))+365*(sum(op_cost.*y))+365*(1000*sum(nse))))

#add the capacity and demand constraints
@constraint(genmincost,thermcapacity[g in (1:4),t in hours],y[g,t]<=x[g]*thermal_cf[g])
@constraint(genmincost,windcapacity[t in hours],y[5,t]<=x[5]*wind_cf[t])
@constraint(genmincost,solarcapacity[t in hours],y[6,t]<=x[6]*solar_cf[t])
@constraint(genmincost,load[t in hours],(sum(y[:,t])+nse[t])==demand[t])
```

## Problem 1.5

```julia
optimize!(genmincost);

using DataFrames
installedresults = DataFrame("Generation type" => generators,"Installed (MW"=>value.(x).data)
total_cost = DataFrame("Total Cost (Dollars)"=>objective_value(genmincost))
nseresults = DataFrame("Time of Day (hr)"=>hours,"Not-Served Energy"=>value.(nse).data)
```

## Problem 1.6

# Problem 2

## Problem 2.1

## Problem 2.2

## Problem 2.3

## Problem 2.4

## Problem 2.5

# References